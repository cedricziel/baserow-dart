{
  "get": {
    "operationId": "get_database_table_row",
    "description": "Fetches an existing row from the table if the user has access to the related table's workspace. The properties of the returned row depend on which fields the table has. For a complete overview of fields use the **list_database_table_fields** endpoint to list them all. In the example all field types are listed, but normally the number in field_{id} key is going to be the id of the field of the field. Or if the GET parameter `user_field_names` is provided then the keys will be the name of the field. The value is what the user has provided and the format of it depends on the fields type.",
    "parameters": [
      {
        "in": "path",
        "name": "row_id",
        "schema": {
          "type": "integer"
        },
        "description": "Returns the row related the provided value.",
        "required": true
      },
      {
        "in": "path",
        "name": "table_id",
        "schema": {
          "type": "integer"
        },
        "description": "Returns the row of the table related to the provided value.",
        "required": true
      },
      {
        "in": "query",
        "name": "user_field_names",
        "schema": {
          "type": "boolean"
        },
        "description": "A flag query parameter that, if provided with one of the following values: `y`, `yes`, `true`, `t`, `on`, `1`, or an empty value, will cause the returned JSON to use the user-specified field names instead of the internal Baserow field names (e.g., field_123)."
      }
    ],
    "tags": [
      "Database table rows"
    ],
    "security": [
      {
        "UserSource JWT": []
      },
      {
        "JWT": []
      },
      {
        "Database token": []
      }
    ],
    "responses": {
      "200": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "../components/schemas/ExampleRowResponseSerializerWithUserFieldNames.json"
            }
          }
        },
        "description": ""
      },
      "400": {
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_USER_NOT_IN_GROUP",
                    "ERROR_REQUEST_BODY_VALIDATION"
                  ]
                },
                "detail": {
                  "oneOf": [
                    {
                      "type": "string",
                      "format": "string",
                      "description": "Human readable details about what went wrong."
                    },
                    {
                      "type": "object",
                      "format": "object",
                      "description": "Machine readable object about what went wrong."
                    }
                  ]
                }
              }
            }
          }
        },
        "description": ""
      },
      "401": {
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_NO_PERMISSION_TO_TABLE"
                  ]
                },
                "detail": {
                  "oneOf": [
                    {
                      "type": "string",
                      "format": "string",
                      "description": "Human readable details about what went wrong."
                    },
                    {
                      "type": "object",
                      "format": "object",
                      "description": "Machine readable object about what went wrong."
                    }
                  ]
                }
              }
            }
          }
        },
        "description": ""
      },
      "404": {
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_TABLE_DOES_NOT_EXIST",
                    "ERROR_ROW_DOES_NOT_EXIST"
                  ]
                },
                "detail": {
                  "oneOf": [
                    {
                      "type": "string",
                      "format": "string",
                      "description": "Human readable details about what went wrong."
                    },
                    {
                      "type": "object",
                      "format": "object",
                      "description": "Machine readable object about what went wrong."
                    }
                  ]
                }
              }
            }
          }
        },
        "description": ""
      }
    }
  },
  "patch": {
    "operationId": "update_database_table_row",
    "description": "Updates an existing row in the table if the user has access to the related table's workspace. The accepted body fields are depending on the fields that the table has. For a complete overview of fields use the **list_database_table_fields** endpoint to list them all. None of the fields are required, if they are not provided the value is not going to be updated. When you want to update a value for the field with id `10`, the key must be named `field_10`. Or if the GET parameter `user_field_names` is provided the key of the field to update must be the name of the field. Multiple different fields to update can be provided in one request. In the examples below you will find all the different field types, the numbers/ids in the example are just there for example purposes, the field_ID must be replaced with the actual id of the field or the name of the field if `user_field_names` is provided.",
    "parameters": [
      {
        "in": "header",
        "name": "ClientSessionId",
        "schema": {
          "type": "string",
          "format": "uuid"
        },
        "description": "An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone."
      },
      {
        "in": "header",
        "name": "ClientUndoRedoActionGroupId",
        "schema": {
          "type": "string",
          "format": "uuid"
        },
        "description": "An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call."
      },
      {
        "in": "path",
        "name": "row_id",
        "schema": {
          "type": "integer"
        },
        "description": "Updates the row related to the value.",
        "required": true
      },
      {
        "in": "query",
        "name": "send_webhook_events",
        "schema": {
          "type": "boolean"
        },
        "description": "A flag query parameter that triggers webhooks after the operation, if set to `y`, `yes`, `true`, `t`, `on`, `1`, `or` left empty. Defaults to `true`"
      },
      {
        "in": "path",
        "name": "table_id",
        "schema": {
          "type": "integer"
        },
        "description": "Updates the row in the table related to the value.",
        "required": true
      },
      {
        "in": "query",
        "name": "user_field_names",
        "schema": {
          "type": "boolean"
        },
        "description": "A flag query parameter that, if provided with one of the following values: `y`, `yes`, `true`, `t`, `on`, `1`, or an empty value, will cause this endpoint to expect and return the user-specified field names instead of the internal Baserow field names (e.g., field_123)."
      }
    ],
    "tags": [
      "Database table rows"
    ],
    "requestBody": {
      "content": {
        "application/json": {
          "schema": {
            "$ref": "../components/schemas/PatchedExampleUpdateRowRequestSerializerWithUserFieldNames.json"
          }
        },
        "application/x-www-form-urlencoded": {
          "schema": {
            "$ref": "../components/schemas/PatchedExampleUpdateRowRequestSerializerWithUserFieldNames.json"
          }
        },
        "multipart/form-data": {
          "schema": {
            "$ref": "../components/schemas/PatchedExampleUpdateRowRequestSerializerWithUserFieldNames.json"
          }
        }
      }
    },
    "security": [
      {
        "UserSource JWT": []
      },
      {
        "JWT": []
      },
      {
        "Database token": []
      }
    ],
    "responses": {
      "200": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "../components/schemas/ExampleRowResponseSerializerWithUserFieldNames.json"
            }
          }
        },
        "description": ""
      },
      "400": {
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_USER_NOT_IN_GROUP",
                    "ERROR_REQUEST_BODY_VALIDATION"
                  ]
                },
                "detail": {
                  "oneOf": [
                    {
                      "type": "string",
                      "format": "string",
                      "description": "Human readable details about what went wrong."
                    },
                    {
                      "type": "object",
                      "format": "object",
                      "description": "Machine readable object about what went wrong."
                    }
                  ]
                }
              }
            }
          }
        },
        "description": ""
      },
      "401": {
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_NO_PERMISSION_TO_TABLE"
                  ]
                },
                "detail": {
                  "oneOf": [
                    {
                      "type": "string",
                      "format": "string",
                      "description": "Human readable details about what went wrong."
                    },
                    {
                      "type": "object",
                      "format": "object",
                      "description": "Machine readable object about what went wrong."
                    }
                  ]
                }
              }
            }
          }
        },
        "description": ""
      },
      "404": {
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_TABLE_DOES_NOT_EXIST",
                    "ERROR_ROW_DOES_NOT_EXIST"
                  ]
                },
                "detail": {
                  "oneOf": [
                    {
                      "type": "string",
                      "format": "string",
                      "description": "Human readable details about what went wrong."
                    },
                    {
                      "type": "object",
                      "format": "object",
                      "description": "Machine readable object about what went wrong."
                    }
                  ]
                }
              }
            }
          }
        },
        "description": ""
      }
    }
  },
  "delete": {
    "operationId": "delete_database_table_row",
    "description": "Deletes an existing row in the table if the user has access to the table's workspace.",
    "parameters": [
      {
        "in": "header",
        "name": "ClientSessionId",
        "schema": {
          "type": "string",
          "format": "uuid"
        },
        "description": "An optional header that marks the action performed by this request as having occurred in a particular client session. Then using the undo/redo endpoints with the same ClientSessionId header this action can be undone/redone."
      },
      {
        "in": "header",
        "name": "ClientUndoRedoActionGroupId",
        "schema": {
          "type": "string",
          "format": "uuid"
        },
        "description": "An optional header that marks the action performed by this request as having occurred in a particular action group.Then calling the undo/redo endpoint with the same ClientSessionId header, all the actions belonging to the same action group can be undone/redone together in a single API call."
      },
      {
        "in": "path",
        "name": "row_id",
        "schema": {
          "type": "integer"
        },
        "description": "Deletes the row related to the value.",
        "required": true
      },
      {
        "in": "query",
        "name": "send_webhook_events",
        "schema": {
          "type": "boolean"
        },
        "description": "A flag query parameter that triggers webhooks after the operation, if set to `y`, `yes`, `true`, `t`, `on`, `1`, `or` left empty. Defaults to `true`"
      },
      {
        "in": "path",
        "name": "table_id",
        "schema": {
          "type": "integer"
        },
        "description": "Deletes the row in the table related to the value.",
        "required": true
      }
    ],
    "tags": [
      "Database table rows"
    ],
    "security": [
      {
        "UserSource JWT": []
      },
      {
        "JWT": []
      },
      {
        "Database token": []
      }
    ],
    "responses": {
      "204": {
        "description": "No response body"
      },
      "400": {
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_USER_NOT_IN_GROUP",
                    "ERROR_CANNOT_DELETE_ALREADY_DELETED_ITEM"
                  ]
                },
                "detail": {
                  "oneOf": [
                    {
                      "type": "string",
                      "format": "string",
                      "description": "Human readable details about what went wrong."
                    },
                    {
                      "type": "object",
                      "format": "object",
                      "description": "Machine readable object about what went wrong."
                    }
                  ]
                }
              }
            }
          }
        },
        "description": ""
      },
      "404": {
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "Machine readable error indicating what went wrong.",
                  "enum": [
                    "ERROR_TABLE_DOES_NOT_EXIST",
                    "ERROR_ROW_DOES_NOT_EXIST"
                  ]
                },
                "detail": {
                  "oneOf": [
                    {
                      "type": "string",
                      "format": "string",
                      "description": "Human readable details about what went wrong."
                    },
                    {
                      "type": "object",
                      "format": "object",
                      "description": "Machine readable object about what went wrong."
                    }
                  ]
                }
              }
            }
          }
        },
        "description": ""
      }
    }
  }
}