{
  "type": "object",
  "description": "This serializer allow to set the type of an element and the element id before which\nwe want to insert the new element.",
  "properties": {
    "order": {
      "type": "string",
      "format": "decimal",
      "pattern": "^-?\\d{0,20}(?:\\.\\d{0,20})?$",
      "readOnly": true,
      "description": "Lowest first."
    },
    "before_id": {
      "type": "integer",
      "description": "If provided, creates the element before the element with the given id."
    },
    "type": {
      "allOf": [
        {
          "$ref": "./TypeD53Enum.json"
        }
      ],
      "description": "The type of the element.\n\n* `heading` - heading\n* `text` - text\n* `link` - link\n* `image` - image\n* `input_text` - input_text\n* `column` - column\n* `button` - button\n* `table` - table\n* `repeat` - repeat\n* `record_selector` - record_selector\n* `form_container` - form_container\n* `choice` - choice\n* `checkbox` - checkbox\n* `iframe` - iframe\n* `datetime_picker` - datetime_picker\n* `header` - header\n* `footer` - footer\n* `auth_form` - auth_form"
    },
    "parent_element_id": {
      "type": "integer",
      "nullable": true,
      "description": "If provided, creates the element as a child of the element with the given id."
    },
    "place_in_container": {
      "type": "string",
      "nullable": true,
      "description": "The place in the container.",
      "maxLength": 255
    },
    "visibility": {
      "allOf": [
        {
          "$ref": "./Visibility789Enum.json"
        }
      ],
      "default": "all"
    },
    "styles": {
      "$ref": "./ButtonLinkConfigBlock.json"
    },
    "style_border_top_color": {
      "type": "string",
      "description": "Top border color.",
      "maxLength": 20
    },
    "style_border_top_size": {
      "type": "integer",
      "maximum": 2147483647,
      "minimum": 0,
      "description": "Pixel height of the top border."
    },
    "style_padding_top": {
      "type": "integer",
      "maximum": 2147483647,
      "minimum": 0,
      "description": "Padding size of the top border."
    },
    "style_margin_top": {
      "type": "integer",
      "maximum": 2147483647,
      "minimum": 0,
      "description": "Margin size of the top border."
    },
    "style_border_bottom_color": {
      "type": "string",
      "description": "Bottom border color",
      "maxLength": 20
    },
    "style_border_bottom_size": {
      "type": "integer",
      "maximum": 2147483647,
      "minimum": 0,
      "description": "Pixel height of the bottom border."
    },
    "style_padding_bottom": {
      "type": "integer",
      "maximum": 2147483647,
      "minimum": 0,
      "description": "Padding size of the bottom border."
    },
    "style_margin_bottom": {
      "type": "integer",
      "maximum": 2147483647,
      "minimum": 0,
      "description": "Margin size of the bottom border."
    },
    "style_border_left_color": {
      "type": "string",
      "description": "Left border color",
      "maxLength": 20
    },
    "style_border_left_size": {
      "type": "integer",
      "maximum": 2147483647,
      "minimum": 0,
      "description": "Pixel height of the left border."
    },
    "style_padding_left": {
      "type": "integer",
      "maximum": 2147483647,
      "minimum": 0,
      "description": "Padding size of the left border."
    },
    "style_margin_left": {
      "type": "integer",
      "maximum": 2147483647,
      "minimum": 0,
      "description": "Margin size of the left border."
    },
    "style_border_right_color": {
      "type": "string",
      "description": "Right border color",
      "maxLength": 20
    },
    "style_border_right_size": {
      "type": "integer",
      "maximum": 2147483647,
      "minimum": 0,
      "description": "Pixel height of the right border."
    },
    "style_padding_right": {
      "type": "integer",
      "maximum": 2147483647,
      "minimum": 0,
      "description": "Padding size of the right border."
    },
    "style_margin_right": {
      "type": "integer",
      "maximum": 2147483647,
      "minimum": 0,
      "description": "Margin size of the right border."
    },
    "style_background": {
      "allOf": [
        {
          "$ref": "./StyleBackgroundEnum.json"
        }
      ],
      "description": "What type of background the element should have.\n\n* `none` - None\n* `color` - Color\n* `image` - Image"
    },
    "style_background_color": {
      "type": "string",
      "description": "The background color if `style_background` is color.",
      "maxLength": 20
    },
    "style_background_file": {
      "allOf": [
        {
          "$ref": "./UserFile.json"
        }
      ],
      "nullable": true,
      "description": "The background image file"
    },
    "style_background_mode": {
      "allOf": [
        {
          "$ref": "./StyleBackgroundModeEnum.json"
        }
      ],
      "description": "The mode of the background image\n\n* `tile` - Tile\n* `fill` - Fill\n* `fit` - Fit"
    },
    "style_width": {
      "allOf": [
        {
          "$ref": "./StyleWidthEnum.json"
        }
      ],
      "description": "Indicates the width of the element.\n\n* `full` - Full\n* `full-width` - Full Width\n* `normal` - Normal\n* `medium` - Medium\n* `small` - Small"
    },
    "navigation_type": {
      "allOf": [
        {
          "$ref": "./NavigationTypeEnum.json"
        }
      ],
      "description": "The navigation type.\n\n* `page` - Page\n* `custom` - Custom"
    },
    "navigate_to_page_id": {
      "type": "integer",
      "nullable": true,
      "description": "('Destination page id for this link. If null then we use the navigate_to_url property instead.',)"
    },
    "navigate_to_url": {
      "type": "string",
      "default": "",
      "description": "If no page is selected, this indicate the destination of the link."
    },
    "page_parameters": {
      "type": "array",
      "items": {
        "$ref": "./PageParameterValue.json"
      },
      "description": "The parameters for each parameters of the selected page if any."
    },
    "target": {
      "allOf": [
        {
          "$ref": "./TargetEnum.json"
        }
      ],
      "description": "The target of the link when we click on it.\n\n* `self` - Self\n* `blank` - Blank"
    },
    "value": {
      "type": "string",
      "default": "",
      "description": "The value of the element. Must be an formula."
    },
    "variant": {
      "allOf": [
        {
          "$ref": "./VariantEnum.json"
        }
      ],
      "description": "The variant of the link.\n\n* `link` - Link\n* `button` - Button"
    }
  },
  "required": [
    "order",
    "type"
  ]
}