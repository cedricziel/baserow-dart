// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'builder_application.dart';

// **************************************************************************
// JsonSerializableGenerator
// **************************************************************************

PathParam _$PathParamFromJson(Map<String, dynamic> json) => PathParam(
      name: json['name'] as String,
      type: json['type'] as String,
    );

Map<String, dynamic> _$PathParamToJson(PathParam instance) => <String, dynamic>{
      'name': instance.name,
      'type': instance.type,
    };

Page _$PageFromJson(Map<String, dynamic> json) => Page(
      id: (json['id'] as num).toInt(),
      name: json['name'] as String,
      path: json['path'] as String,
      pathParams: (json['path_params'] as List<dynamic>?)
          ?.map((e) => PathParam.fromJson(e as Map<String, dynamic>))
          .toList(),
      order: (json['order'] as num).toInt(),
      builderId: (json['builder_id'] as num).toInt(),
      shared: json['shared'] as bool,
      visibility: json['visibility'] as String,
      roleType: json['role_type'] as String,
      roles: json['roles'],
    );

Map<String, dynamic> _$PageToJson(Page instance) => <String, dynamic>{
      'id': instance.id,
      'name': instance.name,
      'path': instance.path,
      'path_params': instance.pathParams,
      'order': instance.order,
      'builder_id': instance.builderId,
      'shared': instance.shared,
      'visibility': instance.visibility,
      'role_type': instance.roleType,
      'roles': instance.roles,
    };

Theme _$ThemeFromJson(Map<String, dynamic> json) => Theme(
      primaryColor: json['primary_color'] as String?,
      secondaryColor: json['secondary_color'] as String?,
      borderColor: json['border_color'] as String?,
      mainSuccessColor: json['main_success_color'] as String?,
      mainWarningColor: json['main_warning_color'] as String?,
      mainErrorColor: json['main_error_color'] as String?,
      bodyFontFamily: json['body_font_family'] as String?,
      bodyFontSize: (json['body_font_size'] as num?)?.toInt(),
      bodyTextColor: json['body_text_color'] as String?,
      bodyTextAlignment: json['body_text_alignment'] as String?,
      heading1FontFamily: json['heading_1_font_family'] as String?,
      heading1FontSize: (json['heading_1_font_size'] as num?)?.toInt(),
      heading1TextColor: json['heading_1_text_color'] as String?,
      heading1TextAlignment: json['heading_1_text_alignment'] as String?,
      heading2FontFamily: json['heading_2_font_family'] as String?,
      heading2FontSize: (json['heading_2_font_size'] as num?)?.toInt(),
      heading2TextColor: json['heading_2_text_color'] as String?,
      heading2TextAlignment: json['heading_2_text_alignment'] as String?,
      heading3FontFamily: json['heading_3_font_family'] as String?,
      heading3FontSize: (json['heading_3_font_size'] as num?)?.toInt(),
      heading3TextColor: json['heading_3_text_color'] as String?,
      heading3TextAlignment: json['heading_3_text_alignment'] as String?,
      heading4FontFamily: json['heading_4_font_family'] as String?,
      heading4FontSize: (json['heading_4_font_size'] as num?)?.toInt(),
      heading4TextColor: json['heading_4_text_color'] as String?,
      heading4TextAlignment: json['heading_4_text_alignment'] as String?,
      heading5FontFamily: json['heading_5_font_family'] as String?,
      heading5FontSize: (json['heading_5_font_size'] as num?)?.toInt(),
      heading5TextColor: json['heading_5_text_color'] as String?,
      heading5TextAlignment: json['heading_5_text_alignment'] as String?,
      heading6FontFamily: json['heading_6_font_family'] as String?,
      heading6FontSize: (json['heading_6_font_size'] as num?)?.toInt(),
      heading6TextColor: json['heading_6_text_color'] as String?,
      heading6TextAlignment: json['heading_6_text_alignment'] as String?,
      buttonFontFamily: json['button_font_family'] as String?,
      buttonFontSize: (json['button_font_size'] as num?)?.toInt(),
      buttonAlignment: json['button_alignment'] as String?,
      buttonTextAlignment: json['button_text_alignment'] as String?,
      buttonWidth: json['button_width'] as String?,
      buttonBackgroundColor: json['button_background_color'] as String?,
      buttonTextColor: json['button_text_color'] as String?,
      buttonBorderColor: json['button_border_color'] as String?,
      buttonBorderSize: (json['button_border_size'] as num?)?.toInt(),
      buttonBorderRadius: (json['button_border_radius'] as num?)?.toInt(),
      buttonVerticalPadding: (json['button_vertical_padding'] as num?)?.toInt(),
      buttonHorizontalPadding:
          (json['button_horizontal_padding'] as num?)?.toInt(),
      buttonHoverBackgroundColor:
          json['button_hover_background_color'] as String?,
      buttonHoverTextColor: json['button_hover_text_color'] as String?,
      buttonHoverBorderColor: json['button_hover_border_color'] as String?,
      linkFontFamily: json['link_font_family'] as String?,
      linkFontSize: (json['link_font_size'] as num?)?.toInt(),
      linkTextAlignment: json['link_text_alignment'] as String?,
      linkTextColor: json['link_text_color'] as String?,
      linkHoverTextColor: json['link_hover_text_color'] as String?,
      imageMaxHeight: (json['image_max_height'] as num?)?.toInt(),
      imageAlignment: json['image_alignment'] as String?,
      imageMaxWidth: (json['image_max_width'] as num?)?.toInt(),
      imageConstraint: json['image_constraint'] as String?,
      pageBackgroundFile: json['page_background_file'] == null
          ? null
          : File.fromJson(json['page_background_file'] as Map<String, dynamic>),
      pageBackgroundColor: json['page_background_color'] as String?,
      pageBackgroundMode: json['page_background_mode'] as String?,
      labelFontFamily: json['label_font_family'] as String?,
      labelTextColor: json['label_text_color'] as String?,
      labelFontSize: (json['label_font_size'] as num?)?.toInt(),
      inputFontFamily: json['input_font_family'] as String?,
      inputFontSize: (json['input_font_size'] as num?)?.toInt(),
      inputTextColor: json['input_text_color'] as String?,
      inputBackgroundColor: json['input_background_color'] as String?,
      inputBorderColor: json['input_border_color'] as String?,
      inputBorderSize: (json['input_border_size'] as num?)?.toInt(),
      inputBorderRadius: (json['input_border_radius'] as num?)?.toInt(),
      inputVerticalPadding: (json['input_vertical_padding'] as num?)?.toInt(),
      inputHorizontalPadding:
          (json['input_horizontal_padding'] as num?)?.toInt(),
      tableBorderColor: json['table_border_color'] as String?,
      tableBorderSize: (json['table_border_size'] as num?)?.toInt(),
      tableBorderRadius: (json['table_border_radius'] as num?)?.toInt(),
      tableHeaderBackgroundColor:
          json['table_header_background_color'] as String?,
      tableHeaderTextColor: json['table_header_text_color'] as String?,
      tableHeaderFontSize: (json['table_header_font_size'] as num?)?.toInt(),
      tableHeaderFontFamily: json['table_header_font_family'] as String?,
      tableHeaderTextAlignment: json['table_header_text_alignment'] as String?,
      tableCellBackgroundColor: json['table_cell_background_color'] as String?,
      tableCellAlternateBackgroundColor:
          json['table_cell_alternate_background_color'] as String?,
      tableCellAlignment: json['table_cell_alignment'] as String?,
      tableCellVerticalPadding:
          (json['table_cell_vertical_padding'] as num?)?.toInt(),
      tableCellHorizontalPadding:
          (json['table_cell_horizontal_padding'] as num?)?.toInt(),
      tableVerticalSeparatorColor:
          json['table_vertical_separator_color'] as String?,
      tableVerticalSeparatorSize:
          (json['table_vertical_separator_size'] as num?)?.toInt(),
      tableHorizontalSeparatorColor:
          json['table_horizontal_separator_color'] as String?,
      tableHorizontalSeparatorSize:
          (json['table_horizontal_separator_size'] as num?)?.toInt(),
    );

Map<String, dynamic> _$ThemeToJson(Theme instance) => <String, dynamic>{
      'primary_color': instance.primaryColor,
      'secondary_color': instance.secondaryColor,
      'border_color': instance.borderColor,
      'main_success_color': instance.mainSuccessColor,
      'main_warning_color': instance.mainWarningColor,
      'main_error_color': instance.mainErrorColor,
      'body_font_family': instance.bodyFontFamily,
      'body_font_size': instance.bodyFontSize,
      'body_text_color': instance.bodyTextColor,
      'body_text_alignment': instance.bodyTextAlignment,
      'heading_1_font_family': instance.heading1FontFamily,
      'heading_1_font_size': instance.heading1FontSize,
      'heading_1_text_color': instance.heading1TextColor,
      'heading_1_text_alignment': instance.heading1TextAlignment,
      'heading_2_font_family': instance.heading2FontFamily,
      'heading_2_font_size': instance.heading2FontSize,
      'heading_2_text_color': instance.heading2TextColor,
      'heading_2_text_alignment': instance.heading2TextAlignment,
      'heading_3_font_family': instance.heading3FontFamily,
      'heading_3_font_size': instance.heading3FontSize,
      'heading_3_text_color': instance.heading3TextColor,
      'heading_3_text_alignment': instance.heading3TextAlignment,
      'heading_4_font_family': instance.heading4FontFamily,
      'heading_4_font_size': instance.heading4FontSize,
      'heading_4_text_color': instance.heading4TextColor,
      'heading_4_text_alignment': instance.heading4TextAlignment,
      'heading_5_font_family': instance.heading5FontFamily,
      'heading_5_font_size': instance.heading5FontSize,
      'heading_5_text_color': instance.heading5TextColor,
      'heading_5_text_alignment': instance.heading5TextAlignment,
      'heading_6_font_family': instance.heading6FontFamily,
      'heading_6_font_size': instance.heading6FontSize,
      'heading_6_text_color': instance.heading6TextColor,
      'heading_6_text_alignment': instance.heading6TextAlignment,
      'button_font_family': instance.buttonFontFamily,
      'button_font_size': instance.buttonFontSize,
      'button_alignment': instance.buttonAlignment,
      'button_text_alignment': instance.buttonTextAlignment,
      'button_width': instance.buttonWidth,
      'button_background_color': instance.buttonBackgroundColor,
      'button_text_color': instance.buttonTextColor,
      'button_border_color': instance.buttonBorderColor,
      'button_border_size': instance.buttonBorderSize,
      'button_border_radius': instance.buttonBorderRadius,
      'button_vertical_padding': instance.buttonVerticalPadding,
      'button_horizontal_padding': instance.buttonHorizontalPadding,
      'button_hover_background_color': instance.buttonHoverBackgroundColor,
      'button_hover_text_color': instance.buttonHoverTextColor,
      'button_hover_border_color': instance.buttonHoverBorderColor,
      'link_font_family': instance.linkFontFamily,
      'link_font_size': instance.linkFontSize,
      'link_text_alignment': instance.linkTextAlignment,
      'link_text_color': instance.linkTextColor,
      'link_hover_text_color': instance.linkHoverTextColor,
      'image_max_height': instance.imageMaxHeight,
      'image_alignment': instance.imageAlignment,
      'image_max_width': instance.imageMaxWidth,
      'image_constraint': instance.imageConstraint,
      'page_background_file': instance.pageBackgroundFile,
      'page_background_color': instance.pageBackgroundColor,
      'page_background_mode': instance.pageBackgroundMode,
      'label_font_family': instance.labelFontFamily,
      'label_text_color': instance.labelTextColor,
      'label_font_size': instance.labelFontSize,
      'input_font_family': instance.inputFontFamily,
      'input_font_size': instance.inputFontSize,
      'input_text_color': instance.inputTextColor,
      'input_background_color': instance.inputBackgroundColor,
      'input_border_color': instance.inputBorderColor,
      'input_border_size': instance.inputBorderSize,
      'input_border_radius': instance.inputBorderRadius,
      'input_vertical_padding': instance.inputVerticalPadding,
      'input_horizontal_padding': instance.inputHorizontalPadding,
      'table_border_color': instance.tableBorderColor,
      'table_border_size': instance.tableBorderSize,
      'table_border_radius': instance.tableBorderRadius,
      'table_header_background_color': instance.tableHeaderBackgroundColor,
      'table_header_text_color': instance.tableHeaderTextColor,
      'table_header_font_size': instance.tableHeaderFontSize,
      'table_header_font_family': instance.tableHeaderFontFamily,
      'table_header_text_alignment': instance.tableHeaderTextAlignment,
      'table_cell_background_color': instance.tableCellBackgroundColor,
      'table_cell_alternate_background_color':
          instance.tableCellAlternateBackgroundColor,
      'table_cell_alignment': instance.tableCellAlignment,
      'table_cell_vertical_padding': instance.tableCellVerticalPadding,
      'table_cell_horizontal_padding': instance.tableCellHorizontalPadding,
      'table_vertical_separator_color': instance.tableVerticalSeparatorColor,
      'table_vertical_separator_size': instance.tableVerticalSeparatorSize,
      'table_horizontal_separator_color':
          instance.tableHorizontalSeparatorColor,
      'table_horizontal_separator_size': instance.tableHorizontalSeparatorSize,
    };
